#!/usr/bin/env ruby

require "rubygems"
require "optparse"
require "rest-client"
require "json"
require 'pp'

<<-doc
    Building on the original version to calculate multiple totals based on timeshifts
    and adding custom (maybe naive) alert logic
doc

EXIT_OK = 0
EXIT_WARNING = 1
EXIT_CRITICAL = 2
EXIT_UNKNOWN = 3

INFORMATIONAL_TIMESHIFT = '-1w'

@@options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"

  @@options[:url] = nil
  opts.on("-u", "--url URL", "Target url") do |url|
    @@options[:url] = url
  end
  @@options[:metric] = nil
  opts.on("-m", "--metric NAME", "Metric path string") do |metric|
    @@options[:metric] = metric
  end
  @@options[:shortname] = nil
  opts.on("-s", "--shortname SHORTNAME", "Metric short name (used for performance data)") do |shortname|
    @@options[:shortname] = shortname
  end
  @@options[:duration] = 5
  opts.on("-d", "--duration LENGTH", "Length, in minute of data to parse (default: 5)") do |duration|
    @@options[:duration] = duration
  end
  @@options[:function] = "average"
  opts.on("-f", "--function \[average \| sum\]", "Function applied to metrics for thresholds (default: average)") do |function|
    @@options[:function] = function
  end
  @@options[:warning] = nil
  opts.on("-w", "--warning VALUE", "Warning threshold") do |warning|
    @@options[:warning] = warning
  end
  @@options[:critical] = nil
  opts.on("-c", "--critical VALUE", "Critical threshold") do |critical|
    @@options[:critical] = critical
  end
  
  @@options[:timeShift] = nil
  opts.on("-t", "--timeShift VALUE", "Graphite timeshifts - 1d, 1w etc") do |timeShift|
    @@options[:timeShift] = timeShift
  end

  @@options[:warning_ratio] = 0.5
  opts.on("-r", "--warning-ratio VALUE", "Current/TimeShifted < VALUE") do |ratio|
    @@options[:warning_ratio] = ratio
  end

  @@options[:timeShifts] = nil #Not setting defaults
  opts.on("-T", "--timeShifts t1,t2", Array, "Avg for these timeshifts. Overrides single timeshift arg") do |timeShifts|
    @@options[:timeShifts] = timeShifts
  end

  opts.on( "-h", "--help", "Display this screen" ) do
    puts opts
    exit
  end
end

optparse.parse!

if (@@options[:url].nil? || @@options[:metric].nil? || 
    (@@options[:timeShift].nil? && @@options[:timeShifts].nil? ) || 
    @@options[:shortname].nil? )
  puts optparse
  exit 2
end

def url(timeShift_val=nil, timeShift=false, custom_timeShift=false)
  base_url = @@options[:url]
  metric = @@options[:metric]
  duration = @@options[:duration].to_s

  if timeShift
    metric = "timeShift(#{metric},'#{timeShift_val}')"  
  elsif custom_timeShift
    metric = "timeShift(#{metric},'#{INFORMATIONAL_TIMESHIFT}')" 
  end
  
  base_url + "/render/?target=" + metric + "&format=json&from=-" + duration + "mins"
end

def get_data(url)
  data = {}
  data["total"] = 0

  JSON.parse(RestClient.get(URI.encode(url))).each do |cache|
    data["#{cache['target']}"] = 0
    count = 0
    cache["datapoints"].each do |point|
      unless (point[0].nil?)
        data["#{cache['target']}"] += point[0]
        count += 1
      end
    end
  
    if (count == 0)
      count = 1
    end
  
    if (@@options[:function] == "average")
      data["#{cache['target']}"] /= count  
    end
    
    data["total"] += data["#{cache['target']}"]
  end
  data
end

timeshifts = []

if @@options[:timeShifts]
    timeshifts += @@options[:timeShifts]
else    
    timeshifts << @@options[:timeShift]
end

# get data for each timeshift and avg it 
timeshifted = 0.0
timeshifts.each do |t|
    timeshifted_data = get_data(url(t, timeShift=true))
    timeshifted += timeshifted_data["total"].to_i
end
timeshifted /= timeshifts.size

data = get_data(url())
total = data["total"].to_i
ratio = total.to_f/timeshifted

# for informational msg
custom_timeshifted_data = get_data(url(nil, false, custom_timeShift=true))
custom_total = custom_timeshifted_data["total"].to_i

ago = timeshifts.join('_')

msg = " #{@@options[:shortname]} in_last_#{@@options[:duration]}_mins, " + 
    "count:#{total}, #{ago}_ago_count:#{timeshifted}, " +
    "ratio:#{ratio}, info_#{INFORMATIONAL_TIMESHIFT}_ago:#{custom_total}"

if (ratio > @@options[:warning_ratio].to_f)
    puts "WARNING #{msg}"
    exit EXIT_WARNING
else
    puts "OK #{msg}"
    exit EXIT_OK
end


